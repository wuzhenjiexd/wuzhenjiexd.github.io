<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python图片外链替换</title>
      <link href="/p/5735.html"/>
      <url>/p/5735.html</url>
      
        <content type="html"><![CDATA[<h1 id="图片外链替换"><a href="#图片外链替换" class="headerlink" title="图片外链替换"></a>图片外链替换</h1><p>之前的图片外链都通过七牛云制作，但是发现七牛云现在只有30天的测试外链，导致之前传的图片30天后就看不到了，所以需要一个替换外链以及上传本地图片的工具。</p><p>在挑选过很多厂商的云存储后选择了阿里云的OSS</p><a id="more"></a><h2 id="开通阿里云OSS"><a href="#开通阿里云OSS" class="headerlink" title="开通阿里云OSS"></a>开通阿里云OSS</h2><p>在使用阿里云OSS之前，需要<a href="https://www.aliyun.com/product/oss/" target="_blank" rel="noopener">注册</a>并且实名认证。在<a href="https://www.aliyun.com/product/oss" target="_blank" rel="noopener">OSS 产品详情页</a>，单击<strong>立即开通</strong>。</p><p>开通之后在<strong>OSS 产品详情</strong>页面单击<strong>管理控制台</strong>就能直接进入 OSS 管理控制台界面。</p><p>开通 OSS 服务后，默认的计费方式是<a href="https://help.aliyun.com/document_detail/48266.html#concept-emk-1nh-tdb" target="_blank" rel="noopener">按量付费</a>。也可以<a href="https://common-buy.aliyun.com/?spm=a2c4g.11186623.2.15.4c166e10W53083#buy" target="_blank" rel="noopener">购买折扣套餐</a>，我是用于在博客上上传图片因此选择标准存储类型，40GB容量每年也只需要9元。</p><p><img src="https://blog-w.oss-cn-beijing.aliyuncs.com/WZJ_blog/url/1563681537809.png" alt="存储空间"></p><p>一般来说40G绰绰有余，可以先试试按量付费再选择。</p><p>阿里云OSS可以在网页上直接上传图片获得外链，也可以通过下载OSSBrowser 客户端工具进行上传，由于想自动的完成上传任务，我选择通过用python调用API的方式来实现。</p><h2 id="阿里云API"><a href="#阿里云API" class="headerlink" title="阿里云API"></a>阿里云API</h2><p>首先在控制平台中根据需要创建bucket，然后在用户头像里进入用户AccessKey，获得AccessKey ID和Access Key Secret，调用API前需要先安装oss库<code>pip install oss2</code>，按照以下代码实现上传</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> oss2</span><br><span class="line">keyid = <span class="string">'XX'</span></span><br><span class="line">keysecret = <span class="string">'YY'</span></span><br><span class="line">auth = oss2.Auth(keyid, keysecret)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Endpoint以北京为例，其它Region请按实际情况填写。</span></span><br><span class="line">Endpoint = <span class="string">'http://oss-cn-beijing.aliyuncs.com'</span></span><br><span class="line">Bucket_name = <span class="string">'NAME'</span> <span class="comment"># 你命名的Bucket_name</span></span><br><span class="line"></span><br><span class="line">http = <span class="string">'https://'</span> +Bucket_name + <span class="string">'.oss-cn-beijing.aliyuncs.com/'</span></span><br><span class="line">bucket = oss2.Bucket(auth, Endpoint, Bucket_name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">up_oss</span><span class="params">(name, objectname, extension, path, bucket)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">:param extension: 文件拓展名</span></span><br><span class="line"><span class="string">    :param name: 文件保存名</span></span><br><span class="line"><span class="string">    :param path: 本地图片路径</span></span><br><span class="line"><span class="string">    :param bucket: 保存的bucket名</span></span><br><span class="line"><span class="string">    :return: 新的图片外链</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    object_path = <span class="string">'WZJ_blog/'</span> + objectname + <span class="string">'/'</span> + name + <span class="string">'.'</span> + extension</span><br><span class="line">    bucket.put_object_from_file(object_path, path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> http + object_path</span><br></pre></td></tr></table></figure><p>然后将新的外链替换md文件中旧的本地地址就可以了。</p><h2 id="图片上传代码"><a href="#图片上传代码" class="headerlink" title="图片上传代码"></a>图片上传代码</h2><h3 id="总体思路"><a href="#总体思路" class="headerlink" title="总体思路"></a>总体思路</h3><ol><li>读取md文件<code>with open(filepath, &#39;r&#39;, encoding=&#39;utf-8&#39;, errors=&#39;ignore&#39;) as f:            contents = f.read()</code></li><li>用正则表达式匹配md文本中图片链接的部分<code>regex = r&#39;!\[.*?\]\((.+?)\)&#39;</code> </li><li>判断是否为本地图片，若是则上传获得新图片外链，不是则跳过</li><li>在md文本中的旧外链替换为新外链</li></ol><h3 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h3><p>运行时带路径命令行参数的情况，完成后自动退出，可以将多个md放在文件夹内将文件夹作为路径参数</p><p><img src="https://blog-w.oss-cn-beijing.aliyuncs.com/WZJ_blog/url/1563732217060.png" alt="1563732217060"></p><p>运行时不带命令行参数的情况，完成后可继续下一个文件，也可对文件夹内的所有md继续替换。</p><p><img src="https://blog-w.oss-cn-beijing.aliyuncs.com/WZJ_blog/url/1563732240243.png" alt="1563732240243"></p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><p>完整代码如下，使用时需要将<strong>keyid</strong>，<strong>keysecret</strong>，<strong>Bucket_name</strong>，<strong>Endpoint</strong>四个内容根据实际情况修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> ttk</span><br><span class="line"><span class="keyword">from</span> tkinter.filedialog <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> oss2</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">islocal</span><span class="params">(path)</span>:</span></span><br><span class="line">    result = os.path.exists(path)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ismd</span><span class="params">(path)</span>:</span></span><br><span class="line">    res = os.path.splitext(path)[<span class="number">-1</span>] == <span class="string">'.md'</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readContentInFile</span><span class="params">(filepath)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param filepath:  读取md文件</span></span><br><span class="line"><span class="string">    :return: 返回md文件的字符串</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">with</span> open(filepath, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>, errors=<span class="string">'ignore'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        contents = f.read()</span><br><span class="line">    <span class="keyword">return</span> contents</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getURLsInFile</span><span class="params">(filePath)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param filePath: 搜索md文件中的图片链接，似乎[]中不写任何东西会漏选 ,将.+换成.*</span></span><br><span class="line"><span class="string">    :return: 所有连接的列表</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    content = readContentInFile(filePath)</span><br><span class="line">    regex = <span class="string">r'!\[.*?\]\((.+?)\)'</span></span><br><span class="line">    results = re.findall(regex, content)</span><br><span class="line">    <span class="keyword">return</span> results</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">up_oss</span><span class="params">(name, objectname, extension, path, bucket)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param name: 文件保存名</span></span><br><span class="line"><span class="string">    :param path: 本地图片路径</span></span><br><span class="line"><span class="string">    :param bucket: 保存的bucket名</span></span><br><span class="line"><span class="string">    :return: 新的图片外链</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    object_path = <span class="string">'WZJ_blog/'</span> + objectname + <span class="string">'/'</span> + name + <span class="string">'.'</span> + extension</span><br><span class="line">    bucket.put_object_from_file(object_path, path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> http + object_path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replaceAllsubStrInFile</span><span class="params">(filePath, oldStr, newStr)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param filePath:  md文本路径</span></span><br><span class="line"><span class="string">    :param oldStr:  旧的图片外链</span></span><br><span class="line"><span class="string">    :param newStr:  新的图片外链</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    aFile = open(filePath, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>, errors=<span class="string">'ignore'</span>)  <span class="comment"># 打开所有文件</span></span><br><span class="line">    str = aFile.read()</span><br><span class="line">    aFile.close()</span><br><span class="line">    str = str.replace(oldStr, newStr)  <span class="comment"># 将字符串里前面全部替换为后面</span></span><br><span class="line">    bFile = open(filePath, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>, errors=<span class="string">'ignore'</span>)</span><br><span class="line">    bFile.write(str)  <span class="comment"># 再写入</span></span><br><span class="line">    bFile.close()  <span class="comment"># 关闭文件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">repalce_url</span><span class="params">(file)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param file:  单个md文件</span></span><br><span class="line"><span class="string">    :return:  整合功能</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    object_name = os.path.split(file)[<span class="number">-1</span>].split(<span class="string">'.'</span>)[<span class="number">0</span>]</span><br><span class="line">    url_list = getURLsInFile(file)</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> tqdm(url_list):</span><br><span class="line">        <span class="keyword">if</span> islocal(url):</span><br><span class="line">            save_path = url</span><br><span class="line">            name = os.path.split(url)[<span class="number">-1</span>].split(<span class="string">'.'</span>)[<span class="number">0</span>]</span><br><span class="line">            extension = os.path.split(url)[<span class="number">-1</span>].split(<span class="string">'.'</span>)[<span class="number">-1</span>]</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                url_new = up_oss(name, object_name, extension, save_path, bucket)</span><br><span class="line">                replaceAllsubStrInFile(file, url, url_new)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                print(<span class="string">'上传%s时发生错误'</span> %url)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'%s | 该本地路径查询失败，已跳过'</span> %url)</span><br><span class="line">    print(<span class="string">'所有图片链接已替换完毕'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">command_run</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    file_path = sys.argv[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(file_path):</span><br><span class="line">        repalce_url(file_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> os.path.isdir(file_path):</span><br><span class="line">        files = [os.path.join(file_path, e) <span class="keyword">for</span> e <span class="keyword">in</span> os.listdir(file_path)]</span><br><span class="line">        <span class="keyword">for</span> i, f_path <span class="keyword">in</span> enumerate(files):</span><br><span class="line">            <span class="keyword">if</span> ismd(f_path):</span><br><span class="line">                repalce_url(f_path)</span><br><span class="line">                print(<span class="string">'完成第%s个markdown文件'</span> % (i + <span class="number">1</span>))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'%s已跳过'</span> % f_path)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GUI_run</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">return_path</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :return:  将文件选择框的选择输入到path中</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        choose_path = askopenfilename(title=<span class="string">'Select markdown file'</span>,</span><br><span class="line">                                      filetypes=[(<span class="string">'markdown'</span>, <span class="string">'*.md'</span>), (<span class="string">'All Files'</span>, <span class="string">'*'</span>)])</span><br><span class="line">        path.set(choose_path)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reutrn_dir</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :return: 将文件夹选择框的选择输入到path中</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        dir_path = askdirectory(title=<span class="string">'Select dir path'</span>)</span><br><span class="line">        path.set(dir_path)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_replace</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :return: 区分输入单个文件还是文件夹</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        file_path = path.get()</span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(file_path):</span><br><span class="line">            repalce_url(file_path)</span><br><span class="line">        <span class="keyword">elif</span> os.path.isdir(file_path):</span><br><span class="line">            files = [os.path.join(file_path, e) <span class="keyword">for</span> e <span class="keyword">in</span> os.listdir(file_path)]</span><br><span class="line">            <span class="keyword">for</span> i, f_path <span class="keyword">in</span> enumerate(files):</span><br><span class="line">                <span class="keyword">if</span> ismd(f_path):</span><br><span class="line">                    repalce_url(f_path)</span><br><span class="line">                    print(<span class="string">'完成第%s个markdown文件'</span> % (i + <span class="number">1</span>))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(<span class="string">'%s已跳过'</span> % f_path)</span><br><span class="line"></span><br><span class="line">    root = Tk()</span><br><span class="line">    root.title(<span class="string">"外链替换"</span>)</span><br><span class="line">    root.geometry(<span class="string">"300x150"</span>)</span><br><span class="line"></span><br><span class="line">    frame1 = Frame(root)  <span class="comment"># 将第一部分整合为一个框架</span></span><br><span class="line"></span><br><span class="line">    path = StringVar()</span><br><span class="line">    ttk.Label(</span><br><span class="line">        frame1, text=<span class="string">"输入路径"</span>, font=(<span class="string">'times'</span>, <span class="number">12</span>)).pack(</span><br><span class="line">        side=LEFT, padx=<span class="number">5</span>, pady=<span class="number">5</span>)</span><br><span class="line">    Button(frame1,</span><br><span class="line">           text=<span class="string">'选择路径'</span>, command=return_path,</span><br><span class="line">           padx=<span class="number">5</span>, pady=<span class="number">5</span>, font=(<span class="string">"times"</span>, <span class="number">10</span>)</span><br><span class="line">           ).pack(side=LEFT)</span><br><span class="line"></span><br><span class="line">    Button(frame1,</span><br><span class="line">           text=<span class="string">'选择文件夹路径'</span>, command=reutrn_dir,</span><br><span class="line">           padx=<span class="number">5</span>, pady=<span class="number">5</span>, font=(<span class="string">"times"</span>, <span class="number">10</span>)</span><br><span class="line">           ).pack(side=LEFT)</span><br><span class="line"></span><br><span class="line">    frame1.pack(side=TOP, padx=<span class="number">10</span>, pady=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    ttk.Entry(</span><br><span class="line">        root, textvariable=path).pack(</span><br><span class="line">        side=TOP, fill=X, padx=<span class="number">5</span>, pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    Button(root,</span><br><span class="line">           text=<span class="string">'开始替换图片外链'</span>,</span><br><span class="line">           command=start_replace,</span><br><span class="line">           padx=<span class="number">10</span>, pady=<span class="number">10</span>,</span><br><span class="line">           font=(<span class="string">"times"</span>, <span class="number">10</span>)</span><br><span class="line">           ).pack(side=LEFT)</span><br><span class="line"></span><br><span class="line">    Button(root,</span><br><span class="line">           text=<span class="string">'Quit'</span>,</span><br><span class="line">           command=root.quit,</span><br><span class="line">           padx=<span class="number">10</span>, pady=<span class="number">10</span>,</span><br><span class="line">           font=(<span class="string">"times"</span>, <span class="number">10</span>)</span><br><span class="line">           ).pack(side=RIGHT)</span><br><span class="line"></span><br><span class="line">    root.mainloop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 阿里云主账号AccessKey拥有所有API的访问权限，风险很高。强烈建议您创建并使用RAM账号进行API访问或日常运维，请登录 https://ram.console.aliyun.com 创建RAM账号。</span></span><br><span class="line">    keyid = <span class="string">'XX'</span></span><br><span class="line">keysecret = <span class="string">'YY'</span></span><br><span class="line">auth = oss2.Auth(keyid, keysecret)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Endpoint以杭州为例，其它Region请按实际情况填写。</span></span><br><span class="line">    Endpoint = <span class="string">'http://oss-cn-beijing.aliyuncs.com'</span></span><br><span class="line">    Bucket_name = <span class="string">'NAME'</span> <span class="comment"># 你命名的Bucket_name</span></span><br><span class="line"></span><br><span class="line">    http = <span class="string">'https://'</span> +Bucket_name + <span class="string">'.oss-cn-beijing.aliyuncs.com/'</span></span><br><span class="line">    bucket = oss2.Bucket(auth, Endpoint, Bucket_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) == <span class="number">1</span>:  <span class="comment"># 无命令行参数</span></span><br><span class="line">        GUI_run()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> len(sys.argv) == <span class="number">2</span>: <span class="comment"># 带地址参数</span></span><br><span class="line">        <span class="keyword">if</span> os.path.exists(sys.argv[<span class="number">1</span>]) <span class="keyword">and</span> os.path.splitext(sys.argv[<span class="number">1</span>])[<span class="number">-1</span>] == <span class="string">'.md'</span>:  <span class="comment"># 路径输入正确</span></span><br><span class="line">            command_run()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> os.path.isdir(sys.argv[<span class="number">1</span>]):</span><br><span class="line">            command_run()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'路径不存在或为非md文件，请退出重输'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'参数过多，请检查输入'</span>)</span><br></pre></td></tr></table></figure><h2 id="其它图库外链转移代码"><a href="#其它图库外链转移代码" class="headerlink" title="其它图库外链转移代码"></a>其它图库外链转移代码</h2><p>为了以防万一，还写了一个将图片从一个云存储转移到了一个云存储的代码，原理是将图片从一个前云存储上下载下来存在本地，然后进行上传替换，其他部分和图片上传代码差不多。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlretrieve</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_img</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    name: 图片的保存名</span></span><br><span class="line"><span class="string">    extension： 图片的保存格式</span></span><br><span class="line"><span class="string">    :param url:  单个图片外链</span></span><br><span class="line"><span class="string">    :return:  下载图片至本地以及返回文件名加路径</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    name = os.path.split(url)[<span class="number">-1</span>].split(<span class="string">'.'</span>)[<span class="number">0</span>]</span><br><span class="line">    extension = os.path.split(url)[<span class="number">-1</span>].split(<span class="string">'.'</span>)[<span class="number">-1</span>]</span><br><span class="line">    <span class="comment"># print(name)</span></span><br><span class="line">    urlretrieve(url,  os.path.join(save.get(), name)+ <span class="string">'.'</span> + extension)</span><br><span class="line">    <span class="keyword">return</span> name, extension, os.path.join(save.get(), name) + <span class="string">'.'</span> + extension</span><br></pre></td></tr></table></figure><p><img src="https://blog-w.oss-cn-beijing.aliyuncs.com/WZJ_blog/url/1563733592949.png" alt="1563733592949"></p><h2 id="效果测试"><a href="#效果测试" class="headerlink" title="效果测试"></a>效果测试</h2><p><img src="https://blog-w.oss-cn-beijing.aliyuncs.com/WZJ_blog/url/38bb90940a7b020860e41d9b6cd9f2d3562cc8dd.jpg" alt="38bb90940a7b020860e41d9b6cd9f2d3562cc8dd">  </p><p>  <img src="https://blog-w.oss-cn-beijing.aliyuncs.com/WZJ_blog/url/5a8e0a45ebf81a4c567c8cb3d92a6059242da6b8.jpg" alt="5a8e0a45ebf81a4c567c8cb3d92a6059242da6b8"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> python </tag>
            
            <tag> oss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>steam游戏按照MC均分自动分类</title>
      <link href="/p/59e6.html"/>
      <url>/p/59e6.html</url>
      
        <content type="html"><![CDATA[<h1 id="steam游戏分类"><a href="#steam游戏分类" class="headerlink" title="steam游戏分类"></a>steam游戏分类</h1><p>换了个新电脑，结果发现steam 的游戏分类全没了，顺带连着之前的电脑分类也没了，而且steam的分类太麻烦太反人类了，正好借这个机会尝试一下爬取游戏MC分数来进行分类。</p><p>悲报：这个功能下个月的steam正式版就会加入…</p><a id="more"></a><h3 id="步骤1：获取拥有的所有游戏名"><a href="#步骤1：获取拥有的所有游戏名" class="headerlink" title="步骤1：获取拥有的所有游戏名"></a>步骤1：获取拥有的所有游戏名</h3><p>steam有自己的api，但是使用有些麻烦，获取游戏名这种简单的功能建议使用<a href="https://github.com/wuzhenjiexd/steamapi" target="_blank" rel="noopener">steamapi</a>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> steamapi</span><br><span class="line"></span><br><span class="line">steamapi.core.APIConnection(api_key=<span class="string">"XXX"</span>, validate_key=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># steam官方支持的api需要申请key才能调用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  可以通过http://steamrep.com网站查询64位ID</span></span><br><span class="line">me = steamapi.user.SteamUser(<span class="number">64</span>位ID)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(me.games)):</span><br><span class="line">    print(me.games[i])</span><br></pre></td></tr></table></figure><h3 id="步骤2：爬取游戏名的分数"><a href="#步骤2：爬取游戏名的分数" class="headerlink" title="步骤2：爬取游戏名的分数"></a>步骤2：爬取游戏名的分数</h3><p>因为是steam游戏的评分，我选择了<a href="https://www.metacritic.com/game/pc" target="_blank" rel="noopener">metacritic的PC版</a>媒体评分，相对公正。而且考虑到”高分信媒体，低分信自己”，对于媒体均分低但是用户评分高的也将单独归为一类。</p><p>第一步就是从步骤1中获得游戏的metacritic链接，观察发现游戏的链接格式为<a href="https://www.metacritic.com/game/pc" target="_blank" rel="noopener">https://www.metacritic.com/game/pc</a>加上游戏名字，但是游戏名字转换很麻烦，总结了一下大致要求有</p><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># 0. 有'/'隔开的一第一个名字为准</span></span><br><span class="line">&gt; <span class="comment"># 1. 全部文字小写</span></span><br><span class="line">&gt; <span class="comment"># 2. 将:,&amp;以及空格转换成-</span></span><br><span class="line">&gt; <span class="comment"># 3. 罗马数字转换成几个i</span></span><br><span class="line">&gt; <span class="comment"># 4. '.'号似乎直接去掉</span></span><br><span class="line">&gt; <span class="comment"># 5. ()内有文字的连带()去除</span></span><br><span class="line">&gt; <span class="comment"># 6. 去掉所有奇怪的符号</span></span><br><span class="line">&gt; <span class="comment"># 7. 去除连续空格以及首尾多余空格</span></span><br><span class="line">&gt; <span class="comment"># 8. 去除连续-以及首尾-</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>其中在实现7,8的时候发现用re.sub来代替str.replace效果很好</p><p><code>game= re.sub(r&#39;--+&#39;, &#39;-&#39;, game, 0)</code></p><blockquote><h4 id="re-sub的功能"><a href="#re-sub的功能" class="headerlink" title="re.sub的功能"></a>re.sub的功能</h4><p>re是regular expression的所写，表示正则表达式</p><p>sub是substitute的所写，表示替换；</p><p>re.sub是个正则表达式方面的函数，用来实现通过正则表达式，实现比普通字符串的replace更加强大的替换功能；  </p><p>re.sub共有五个参数。</p><p>其中三个必选参数：<em>pattern</em>, <em>repl</em>, <em>string</em></p><p>两个可选参数：<em>count</em>, <em>flags</em></p><p>pattern，表示正则中的模式字符串。</p><p>repl可以是字符串，也可以是函数。表示被替换对象</p><p>string，即表示要被处理，要被替换的那个string字符串。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6'</span></span><br><span class="line">&#125; <span class="comment"># 不加这个会导致403错误</span></span><br><span class="line"></span><br><span class="line">data = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">req = urllib.request.Request(url, data, headers)</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(req)</span><br><span class="line"></span><br><span class="line">the_page = response.read()</span><br><span class="line"></span><br><span class="line">html_doc = the_page.decode(<span class="string">"utf8"</span>)</span><br></pre></td></tr></table></figure><p>此时就得到了我们想到的网页的html</p><p>但是由于没有学习过html，第一步要先看懂html</p><blockquote><h4 id="HTML-标题"><a href="#HTML-标题" class="headerlink" title="HTML 标题"></a>HTML 标题</h4><p>HTML 标题（Heading）是通过 </p><h1> - <h6> 等标签进行定义的。<p></p><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&gt; <span class="tag">&lt;<span class="name">h2</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">&gt; <span class="tag">&lt;<span class="name">h3</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></h6></h1></blockquote><blockquote><h4 id="HTML-段落"><a href="#HTML-段落" class="headerlink" title="HTML 段落"></a>HTML 段落</h4><p>HTML 段落是通过 </p><p> 标签进行定义的。</p><h5 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&gt; <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is another paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><h4 id="HTML-链接"><a href="#HTML-链接" class="headerlink" title="HTML 链接"></a>HTML 链接</h4><p>HTML 链接是通过 <a> 标签进行定义的。</a></p><h5 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.w3school.com.cn"</span>&gt;</span>This is a link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><h4 id="HTML-图像"><a href="#HTML-图像" class="headerlink" title="HTML 图像"></a>HTML 图像</h4><p>HTML 图像是通过 <img> 标签进行定义的。</p><h5 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"w3school.jpg"</span> <span class="attr">width</span>=<span class="string">"104"</span> <span class="attr">height</span>=<span class="string">"142"</span> /&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote><p>解析获得的html，一般有以下几种方法</p><ol><li>正则表达式</li><li>Beautifulsoup</li><li>lxml</li></ol><blockquote><p>2,3这两个库都是HTML/XML的处理库，Beautifulsoup纯python实现，效率低，但是功能实用，比如能用通过结果搜索获得某个HTML节点的源码；lxmlC语言编码，高效，支持Xpath</p></blockquote><p>此处我选用了Beautifulsoup,导入json视为了将获得的text转换成字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">soup = BeautifulSoup(html_doc, <span class="string">'html.parser'</span>)</span><br><span class="line">ratingValue = json.loads(soup.find(<span class="string">'script'</span>, &#123;<span class="string">'type'</span>: <span class="string">'application/ld+json'</span>&#125;).get_text())[<span class="string">'aggregateRating'</span>][<span class="string">'ratingValue'</span>]</span><br></pre></td></tr></table></figure><p>到这一步就获得了游戏对应的评分。</p><p>将获得数据写成csv文档，但是csv文档直接用excel打开中文会显示成乱码。</p><p>解决步骤：</p><ol><li><p><strong>用记事本打开csv文件，另存为Unicode格式</strong></p></li><li><p><strong>重新打开excel，执行”数据”-&gt;”自文本”-&gt;选择csv文件-&gt;”导入”-&gt;出现文本导入导向对话框-&gt;”下一步”-&gt;取消Tab键，选中逗号作为分隔符号-&gt;”确定”</strong></p></li></ol><p>到这一步工作就基本完成了。</p><h3 id="步骤3：根据信息进行分类"><a href="#步骤3：根据信息进行分类" class="headerlink" title="步骤3：根据信息进行分类"></a>步骤3：根据信息进行分类</h3><p>steam的游戏分类信息都保存在\Steam\user data{user}\7\remote\sharedconfig.vdf中，建议使用notepad++打开。VDF的全称是<strong>Valve Data File</strong>，VDF 文件扩展名主要归类于 <strong>Game Files</strong> 类别，用于安装脚本，可视化元素，资源和配置脚本等。</p><p>这是最原始的一个VDF配置，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&quot;UserRoamingConfigStore&quot;</span><br><span class="line">&#123;</span><br><span class="line">&quot;Software&quot;</span><br><span class="line">&#123;</span><br><span class="line">&quot;Valve&quot;</span><br><span class="line">&#123;</span><br><span class="line">&quot;Steam&quot;</span><br><span class="line">&#123;</span><br><span class="line">&quot;SurveyDate&quot;&quot;2019-06-17&quot;</span><br><span class="line">&quot;SurveyDateVersion&quot;&quot;-2861855842901178672&quot;</span><br><span class="line">&quot;StartMenuShortcutCheck&quot;&quot;1&quot;</span><br><span class="line">&quot;DesktopShortcutCheck&quot;&quot;0&quot;</span><br><span class="line">&quot;SteamDefaultDialog&quot;&quot;#app_store&quot;</span><br><span class="line">&quot;Apps&quot;</span><br><span class="line">&#123;</span><br><span class="line">&quot;619150&quot;</span><br><span class="line">&#123;</span><br><span class="line">&quot;cloudenabled&quot;&quot;1&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&quot;controller_config&quot;</span><br><span class="line">&#123;</span><br><span class="line">&quot;619150&quot;</span><br><span class="line">&#123;</span><br><span class="line">&quot;usetime&quot;&quot;4718.4248046875&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新添加的游戏分类要在Apps按照以下格式修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&quot;Apps&quot;</span><br><span class="line">            &#123;</span><br><span class="line">&quot;373480&quot;</span><br><span class="line">&#123;</span><br><span class="line">&quot;tags&quot;</span><br><span class="line">&#123;</span><br><span class="line">&quot;0&quot;&quot;test&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中”373480”表示的游戏的appid， “0”        “test”中的“0”表示这是该游戏的第一个分类，”test”表示该分类名字为test。基本上了解这些就可以开始分类了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">game</span>:</span></span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, grade)</span>:</span></span><br><span class="line">        self.name = str(name)</span><br><span class="line">        self.grade = grade</span><br><span class="line">        game_add.num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gen_info</span><span class="params">(self)</span>:</span></span><br><span class="line">        info = <span class="string">"                    "</span> + <span class="string">'"'</span> + self.name + <span class="string">'"'</span> + <span class="string">"\n"</span>  <span class="comment"># 5个tab,为了好看</span></span><br><span class="line">        info = info + <span class="string">'&#123;'</span> + <span class="string">"\n"</span></span><br><span class="line">        info = info + <span class="string">'"tags"'</span> + <span class="string">'\n'</span></span><br><span class="line">        info = info + <span class="string">"&#123;"</span> + <span class="string">"\n"</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.grade)):</span><br><span class="line">            info = info + <span class="string">''</span> + <span class="string">'"'</span> + str(i) + <span class="string">'"'</span> + <span class="string">'    '</span> + <span class="string">'"'</span> + self.grade[</span><br><span class="line">                i] + <span class="string">'"'</span> + <span class="string">"\n"</span></span><br><span class="line">        info = info + <span class="string">'&#125;'</span> + <span class="string">'\n'</span></span><br><span class="line">        info = info + <span class="string">'&#125;'</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> info</span><br></pre></td></tr></table></figure><p>之后只要创建这个类的实例，然后把gen_info拼接起来就可以了。</p><h3 id="实际效果"><a href="#实际效果" class="headerlink" title="实际效果"></a>实际效果</h3><p><img src="https://blog-w.oss-cn-beijing.aliyuncs.com/WZJ_blog/steam游戏自动分类/微信截图_20190625105610.png" alt="所有分类"></p><p><img src="https://blog-w.oss-cn-beijing.aliyuncs.com/WZJ_blog/steam游戏自动分类/微信截图_20190625105636.png" alt="9分以上的游戏"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> steam </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用pyradiomics提取医学图像中的特征</title>
      <link href="/p/5ee0.html"/>
      <url>/p/5ee0.html</url>
      
        <content type="html"><![CDATA[<p>pyradiomics是一个开源的python包，用于提取医学影像上的放射组学特征。</p><p>这篇主要讲了pyradiomics的安装以及使用。</p><a id="more"></a><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li><p>确保计算机已经安装了python，且版本在3.4以上</p></li><li><p>通过<code>python -m pip install pyradiomics</code>进行安装</p></li></ol><p>其他安装方法可以参照<a href="https://pyradiomics.readthedocs.io/en/latest/" target="_blank" rel="noopener">官方文档</a></p><h3 id="特征提取"><a href="#特征提取" class="headerlink" title="特征提取"></a>特征提取</h3><h4 id="命令行运行"><a href="#命令行运行" class="headerlink" title="命令行运行"></a>命令行运行</h4><p>pyradiomics可以直接在命令行中进行操作，可以对单组图像或者批量图像进行特征提取。</p><p>在提取前先确保你有<strong>医学影像的nrrd格式文件</strong>以及<strong>对应的标注轮廓后的Mask文件</strong></p><p>nrrd并不是必须的，只要是itk能读取的格式就行（比如NIfTI，MHA，MHD，HDR等）</p><ul><li>从单个图像中提取特征</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pyradiomics &lt;path/to/image&gt; &lt;path/to/segmentation&gt;</span><br></pre></td></tr></table></figure><ul><li>从批量图像中提取特征</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pyradiomics &lt;path/to/input&gt;</span><br></pre></td></tr></table></figure><p>批量图像处理时的输入为csv文件，其中第一列的标题必须为Image，第二列的标题必须为Mask（大小写敏感）。Image那一列存放的信息为每个图像的存放地址，Msak为mask的存放地址。也可以添加其他列，计算后得到的特征值将存在添加的列后面，添加的列信息保持不变。</p><blockquote><p>所有标题都应该是唯一的，与PyRadiomics（<code>&lt;filter&gt;_&lt;class&gt;_&lt;feature&gt;</code>）提供的标题不同。如果发生冲突，PyRadiomics值会覆盖值。</p></blockquote><p>默认情况下特征值将打印到控制台窗口，如果需要将结果存储csv文件中需要将命令修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pyradiomics &lt;path/to/image&gt; &lt;path/to/segmentation&gt; -o results.csv -f csv</span><br><span class="line">$ pyradiomics &lt;path/to/input&gt; -o results.csv -f csv</span><br></pre></td></tr></table></figure><p>对于特征提取时的参数选择可以通过在参数中指定参数文件radiomics-parameter-file-label<code>--param</code></p><p>或者添加定义提取<code>--setting</code>来完成。</p><h4 id="使用python进行特征提取"><a href="#使用python进行特征提取" class="headerlink" title="使用python进行特征提取"></a>使用python进行特征提取</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> SimpleITK <span class="keyword">as</span> sitk</span><br><span class="line"><span class="keyword">import</span> six</span><br><span class="line"><span class="keyword">from</span> radiomics <span class="keyword">import</span> featureextractor, getTestCase </span><br><span class="line"></span><br><span class="line">dataDir = <span class="string">'/path/to/pyradiomics'</span> <span class="comment"># 存放有image和mask的文件夹</span></span><br><span class="line"></span><br><span class="line">imageName, maskName = getTestCase(<span class="string">'brain1'</span>, dataDir) <span class="comment"># 将iamge路径和mask路径分开存储</span></span><br><span class="line"></span><br><span class="line">params = os.path.join(dataDir, <span class="string">"examples"</span>, <span class="string">"exampleSettings"</span>, <span class="string">"Params.yaml"</span>) <span class="comment"># 参数文件路径</span></span><br><span class="line"></span><br><span class="line">extractor = featureextractor.RadiomicsFeaturesExtractor(params) <span class="comment"># 使用参数文件实例化特征提取器类</span></span><br><span class="line"></span><br><span class="line">result = extractor.execute(imageName, maskName)</span><br><span class="line"><span class="keyword">for</span> key, val <span class="keyword">in</span> six.iteritems(result):</span><br><span class="line">  print(<span class="string">"\t%s: %s"</span> %(key, val)) <span class="comment"># 进行特征提取</span></span><br></pre></td></tr></table></figure><h4 id="3D-slicer"><a href="#3D-slicer" class="headerlink" title="3D slicer"></a>3D slicer</h4><p>在3D slicer中可以添加“Radiomics”扩展，按照要求导入文件，即可输出特征文件。</p>]]></content>
      
      
      <categories>
          
          <category> 医学图像 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> radiomics </tag>
            
            <tag> 医学图像 </tag>
            
            <tag> 特征提取 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python库:pathlib和os的区别</title>
      <link href="/p/787a.html"/>
      <url>/p/787a.html</url>
      
        <content type="html"><![CDATA[<p>pathlib作为python3的新特性之一，对于路径会创造Path对象，使对路径的操作更方便。之前在别人的代码里见识到了pathlib的优点，现在希望用pathlib来代替os库来完成路径的操作。</p><a id="more"></a><p>目前我主要用到os的地方有以下几个：</p><p><a href="#join">路径拼接</a></p><p><a href="#mkdir">新建文件夹</a></p><p><a href="#walk">文件遍历</a></p><p><a href="#list">获得子级文件的路径</a></p><p><a href="#rename">重命名文件夹</a></p><p><a href="#other">pathlib的优势</a></p><p><a href="#lack">pathlib的不足</a></p><ul><li><span id="join">路径拼接</span></li></ul><p>pathlib采用了斜线直接连接的方式，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">path = <span class="string">'root'</span></span><br><span class="line">dir = <span class="string">'test'</span></span><br><span class="line">target_path = os.path.join(path,dir) <span class="comment"># 'root/test'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line">p1 = Path(<span class="string">'root'</span>)</span><br><span class="line">p2 = p1/<span class="string">'test'</span></span><br></pre></td></tr></table></figure><ul><li><span id="mkdir">新建文件夹</span></li></ul><p>在使用os库的时候，新建文件夹之前需要判断文件夹是否存在，如果文件夹已存在，创建文件夹时会报错。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">    os.mkdir(path) <span class="comment"># 创建一个文件夹</span></span><br><span class="line">    os.makedirs(path) <span class="comment"># 创建多个文件夹</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line">p = <span class="string">'XXX'</span></span><br><span class="line">p.mkdir(parents=<span class="literal">True</span>) <span class="comment"># parents=True会创造路径中间缺少的文件夹</span></span><br></pre></td></tr></table></figure><ul><li><span id="walk">文件遍历</span></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(path):</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">        temp_path = os.path.join(root, file)</span><br></pre></td></tr></table></figure><p>pathlib在遍历时结合了glob,在检索时还能定制检索的要求。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line">base_dir = <span class="string">'XXX'</span></span><br><span class="line">p = Path(base_dir)</span><br><span class="line"><span class="comment"># 遍历获取改文件夹下面所有的文件</span></span><br><span class="line">file_list = p.glob(<span class="string">'**/*'</span>) </span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> file_list:</span><br></pre></td></tr></table></figure><ul><li><span id="list">获得子级文件的路径</span></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.listdir()</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path </span><br><span class="line">Path.iterdir()</span><br></pre></td></tr></table></figure><ul><li><span id="rename">重命名文件夹</span></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.rename(src, dst)</span><br><span class="line"><span class="comment"># src -- 要修改的目录名</span></span><br><span class="line"><span class="comment"># dst -- 修改后的目录名</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path </span><br><span class="line">p = Path(src)</span><br><span class="line">p.rename(dst)</span><br><span class="line"><span class="comment"># 即pathlib主要是通过对象来完成功能</span></span><br></pre></td></tr></table></figure><ul><li><span id="other">pathlib的优势</span></li></ul><p>在建立path对象之后，可以调用路径的组件直接获得路径的信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Path. parts <span class="comment">#获得路径的各个组件</span></span><br><span class="line">PurePath(<span class="string">'/usr/bin/python3'</span>).parts</span><br><span class="line">(<span class="string">'/'</span>,<span class="string">'usr'</span>, <span class="string">'bin'</span>, <span class="string">'python3'</span>)</span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line">PurePath. drive <span class="comment">#获得路径的驱动</span></span><br><span class="line">PureWindowsPath(<span class="string">'c:/Program Files/'</span>).drive</span><br><span class="line"><span class="string">'c:'</span></span><br><span class="line"><span class="comment">########################################</span></span><br><span class="line">PurePath. parents <span class="comment">#路径的父级</span></span><br><span class="line">p = PureWindowsPath(<span class="string">'c:/foo/bar/setup.py'</span>)</span><br><span class="line"></span><br><span class="line">p.parents[<span class="number">0</span>]</span><br><span class="line">PureWindowsPath(<span class="string">'c:/foo/bar'</span>)</span><br><span class="line"></span><br><span class="line">p.parents[<span class="number">1</span>]</span><br><span class="line">PureWindowsPath(<span class="string">'c:/foo'</span>)</span><br><span class="line"></span><br><span class="line">p.parents[<span class="number">2</span>]</span><br><span class="line">PureWindowsPath(<span class="string">'c:/'</span>)</span><br><span class="line"><span class="comment">#########################################</span></span><br><span class="line">PurePath. name <span class="comment">#路径的最终路径</span></span><br><span class="line">PurePosixPath(<span class="string">'my/library/setup.py'</span>).name</span><br><span class="line"><span class="string">'setup.py</span></span><br><span class="line"><span class="string">##########################################</span></span><br><span class="line"><span class="string">PurePath. suffix #路径的文件拓展名</span></span><br><span class="line"><span class="string">PurePosixPath('</span>my/library/setup.py<span class="string">').suffix</span></span><br><span class="line"><span class="string">'</span>.py<span class="string">'</span></span><br></pre></td></tr></table></figure><p>pathlib一些方法在实现时调用了os的方法，所以很多输出他们是一样的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cwd</span><span class="params">(cls)</span>:</span></span><br><span class="line">    <span class="string">"""Return a new path pointing to the current working directory</span></span><br><span class="line"><span class="string">    (as returned by os.getcwd()).</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> cls(os.getcwd())</span><br></pre></td></tr></table></figure><p>但是使用 Path 对象可以使代码更加明确。比如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line">person = &#123;<span class="string">"name"</span>: <span class="string">"Trey Hunner"</span>, <span class="string">"location"</span>: <span class="string">"San Diego"</span>&#125;</span><br><span class="line">pycon_2019 = date(<span class="number">2019</span>, <span class="number">5</span>, <span class="number">1</span>)</span><br><span class="line">home_directory = Path(<span class="string">'/home/trey'</span>)</span><br></pre></td></tr></table></figure><p>就会比下面的代码更直观。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">person = <span class="string">'&#123;"name": "Trey Hunner", "location": "San Diego"&#125;'</span></span><br><span class="line">pycon_2019 = <span class="string">"2019-05-01"</span></span><br><span class="line">home_directory = <span class="string">'/home/trey'</span></span><br></pre></td></tr></table></figure><ul><li><span id="lack">pathlib的不足之处  </span> </li></ul><ol><li><p>pathlib缺少对文件夹进行复制粘贴的功能，相应操作需要导入shutil才能完成</p></li><li><p>pathlib缺少os.chdir，无法改变当前的工作目录</p></li></ol><p>最后是一些os和pathlib的对照语法。</p><p><img src="https://blog-w.oss-cn-beijing.aliyuncs.com/WZJ/os.png" alt="os&amp;path"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> os </tag>
            
            <tag> pathlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优化网站打开的速度</title>
      <link href="/p/7c7e.html"/>
      <url>/p/7c7e.html</url>
      
        <content type="html"><![CDATA[<p>在加了一些功能之后发现网络打开太慢了，尝试一些能加速打开的方法。</p><p>首先测试一下什么都不做时候的效果</p><p>测试计时用的是chrome的web调试中的Network加载时间</p><p>初次打开时间在3秒左右，之后重复刷新时间在1.2s左右</p><a id="more"></a><h4 id="尝试CDN加速"><a href="#尝试CDN加速" class="headerlink" title="尝试CDN加速"></a>尝试CDN加速</h4><p>使用CloudFlare来修改DNS</p><p>测试打开时间依旧在3s以上</p><p>并没有明显变化，由于CloudFlare使用的不是大陆的服务器，可能反而会导致速度更慢，暂时放弃这种方法</p><h4 id="取消加载动画"><a href="#取消加载动画" class="headerlink" title="取消加载动画"></a>取消加载动画</h4><p>next主题自带加载动画，会在网站感官上变得很慢，先去掉动画尝试一下效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">motion:</span><br><span class="line">  enable: false</span><br></pre></td></tr></table></figure><h4 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h4><p>在使用到图片时才进行加载，加快网站打开速度</p><p>待尝试</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> cdn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客更新&lt;1&gt;</title>
      <link href="/p/ea1c.html"/>
      <url>/p/ea1c.html</url>
      
        <content type="html"><![CDATA[<p>在之前的基础上对博客添加一点优化  </p><p>包括博文置顶、添加当前浏览进度、加入live2d、添加评论功能、添加访问人数</p><a id="more"></a><h4 id="博文置顶"><a href="#博文置顶" class="headerlink" title="博文置顶"></a>博文置顶</h4><p>安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm uninstall hexo-generator-index --save</span><br><span class="line">$ npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure><p>然后在需要置顶的文章上加入top，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 2018</span><br><span class="line">date: 2018-10-25 16:10:03</span><br><span class="line">top: 10</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h4 id="添加当前浏览进度"><a href="#添加当前浏览进度" class="headerlink" title="添加当前浏览进度"></a>添加当前浏览进度</h4><p>修改<code>themes/*/_config.yml</code>，把 <code>false</code> 改为 <code>true</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Back to top in sidebar</span><br><span class="line">b2t: true</span><br><span class="line"></span><br><span class="line"># Scroll percent label in b2t button</span><br><span class="line">scrollpercent: true</span><br></pre></td></tr></table></figure><h4 id="加入live2d"><a href="#加入live2d" class="headerlink" title="加入live2d"></a>加入live2d</h4><p>安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure><p>将以下代码添加到主题配置文件<code>_config.yml</code>，修改&lt;你喜欢的模型名字&gt;：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  pluginRootPath: live2dw/</span><br><span class="line">  pluginJsPath: lib/</span><br><span class="line">  pluginModelPath: assets/</span><br><span class="line">  tagMode: false</span><br><span class="line">  log: false</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-&lt;你喜欢的模型名字&gt;</span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: 150</span><br><span class="line">    height: 300</span><br><span class="line">  mobile:</span><br><span class="line">    show: true</span><br></pre></td></tr></table></figure><p>建配置文件</p><p>在站点目录下建文件夹<code>live2d_models</code>，</p><p>再在<code>live2d_models</code>下建文件夹<code>&lt;你喜欢的模型名字&gt;</code>,</p><p>再在<code>&lt;你喜欢的模型名字&gt;</code>下建json文件：&lt;你喜欢的模型名字&gt;.model.json</p><p>安装模型。在命令行（即Git Bash）运行以下命令即可：</p><blockquote><p>npm install –save live2d-widget-model-&lt;你喜欢的模型名字&gt;</p></blockquote><p>在命令行（即Git Bash）运行以下命令， 在<code>http://127.0.0.1:4000/</code>查看测试结果:</p><blockquote><p>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</p></blockquote><p>然后因为太丑了取消掉了。</p><h4 id="添加评论功能"><a href="#添加评论功能" class="headerlink" title="添加评论功能"></a>添加评论功能</h4><p>这是我<a href="https://vonsdite.cn/posts/dd07da63.html" target="_blank" rel="noopener">参考的博客</a></p><p>然后参考着就放弃了，然后选择了<a href="https://valine.js.org/" target="_blank" rel="noopener">Valine</a>  </p><p>比起必须备案的<a href="http://changyan.kuaizhan.com/" target="_blank" rel="noopener">畅言</a>，valine只需要注册就能得到app ID，十分方便，评论时也无需登录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">valine:</span><br><span class="line">enable: true</span><br><span class="line">appid: xxxxxx # 填写 leancloud  appid</span><br><span class="line">appkey: xxxxxx # 填写 leancloud appkey</span><br><span class="line">notify: false #</span><br><span class="line">verify: false # Verification code</span><br><span class="line">placeholder:  # comment box placeholder 默认的评论展示</span><br><span class="line">avatar: mm # gravatar style</span><br><span class="line">guest_info: nick,mail,link # custom comment header</span><br><span class="line">pageSize: 10 # pagination size</span><br></pre></td></tr></table></figure><h4 id="添加访问人数"><a href="#添加访问人数" class="headerlink" title="添加访问人数"></a>添加访问人数</h4><p>next主题自带busuanzi，只需要在主题配置文件中找到busuanzi，并将False改为true即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">busuanzi_count:</span><br><span class="line">  enable: true</span><br><span class="line">  total_visitors: true</span><br><span class="line">  total_visitors_icon: user</span><br><span class="line">  total_views: true</span><br><span class="line">  total_views_icon: eye</span><br><span class="line">  post_views: true</span><br><span class="line">  post_views_icon: eye</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>公式、图片输入</title>
      <link href="/p/91ec.html"/>
      <url>/p/91ec.html</url>
      
        <content type="html"><![CDATA[<p>目前新建的博客中图片和公式输入还存在问题。</p><p>由于在引擎渲染生成网页的时候，语法和markdown语法冲突，可以通过在主题（Theme）中开启 MathJax 开关来避免这个问题</p><a id="more"></a><p>进入到主题目录，找到 _config.yml 配置问题，把 math 默认的 false 修改为true，具体如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">math:</span><br><span class="line">  enable: true</span><br><span class="line"></span><br><span class="line">  # Default(true) will load mathjax/katex script on demand</span><br><span class="line">  # That is it only render those page who has &apos;mathjax: true&apos; in Front Matter.</span><br><span class="line">  # If you set it to false, it will load mathjax/katex srcipt EVERY PAGE.</span><br><span class="line">  per_page: true</span><br><span class="line"></span><br><span class="line">  engine: mathjax</span><br><span class="line">  #engine: katex</span><br></pre></td></tr></table></figure><p>然后在文章开头加入mathjax: true</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: index.html</span><br><span class="line">date: 2018-07-05 12:01:30</span><br><span class="line">tags:</span><br><span class="line">mathjax: true</span><br><span class="line">--</span><br></pre></td></tr></table></figure><p>$$<br>\begin{array}{c}{f=u n} \ {p(f | u, L)=\frac{2 L^{L}}{\Gamma(L) u^{2 L}} f^{2 L-1} e^{-\frac{L^{2}}{u^{2}}}}\end{array}<br>$$</p><p>公式测试输入成功  </p><p>直接保存本地图片无法在网页上显示，解决方法有两种：</p><ul><li>使用图床  </li></ul><p>选择随意一个图床工具，我这里用的<a href="https://demo.chevereto.com/" target="_blank" rel="noopener">cheveretocom</a>，上传你的图片，然后选择markdown链接，将链接放到<code>![](签名链接)</code>中，就可以正常显示。  </p><p><a href="https://demo.chevereto.com/i/Qjj" target="_blank" rel="noopener"><img src="https://demo.chevereto.com/images/2019/05/18/timg.jpg" alt="timg.jpg"></a></p><p>此外还有各种工具能更快的做这步，比如mac下的imic，windows下的mpic</p><ul><li>对博客中用到的图片把保存在对应文件夹下</li></ul><p>首先确认将<code>_config.yml</code> 中的 <code>post_asset_folder</code>修改为true  </p><p>之后在<code>hexo n [postname]</code>的时候会自动生成一个同名文件夹</p><p>然后在hexo的目录下执行<code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code>  </p><p>这样的目录结构（目录名和文章名一致），只要使用 <code>![logo](XX/logo.jpg)</code> 就可以插入图片。其中<code>[]</code>里面不写文字则没有图片标题。</p><p>但是图片测试为什么没有成功呢。。</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建博客</title>
      <link href="/p/dad8.html"/>
      <url>/p/dad8.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通过hexo搭建个人博客主要有下面三个部分内容</p><ol><li>安装hexo，生成基础文件格式</li><li>选择使用博客主题，修改配置文件</li><li>将文件上传到github上，然后通过域名解析连接到个人域名上</li></ol><a id="more"></a><h2 id="安装配置文件"><a href="#安装配置文件" class="headerlink" title="安装配置文件"></a>安装配置文件</h2><h3 id="1-安装Node-js"><a href="#1-安装Node-js" class="headerlink" title="1.安装Node.js"></a>1.安装Node.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:chris-lea/node.js</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install nodejs</span><br></pre></td></tr></table></figure><h3 id="2-安装Git"><a href="#2-安装Git" class="headerlink" title="2.安装Git"></a>2.安装Git</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><h3 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3.安装hexo"></a>3.安装hexo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install hexo -g</span><br></pre></td></tr></table></figure><p>初始你博客的根目录（或者cd到指定目录下，然后执行hexo init）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>此时就会生成如下路径的文件夹，到这一步hexo的安装任务就完成了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p>这里解释一下各个文件夹的作用：<br>config.yml<br>博客的配置文件，博客的名称、关键词、作者、语言、博客主题…设置都在里面。<br>package.json<br>应用程序信息，新添加的插件内容也会出现在这里面，我们可以不修改这里的内容。<br>scaffolds<br>scaffolds就是脚手架的意思，这里放了三个模板文件，分别是新添加博客文章（posts）、新添加博客页（page）和新添加草稿（draft）的目标样式。<br>这部分可以修改的内容是，我们可以在模板上添加比如categories等自定义内容<br>source<br>source是放置我们博客内容的地方，里面初始只有两个文件夹，一个是drafts（草稿），一个posts（文章），但之后我们通过命令新建tags（标签）还有categories（分类）页后，这里会相应地增加文件夹。<br>themes<br>放置主题文件包的地方。Hexo会根据这个文件来生成静态页面。<br>初始状态下只有landscape一个文件夹，后续我们可以添加自己喜欢的。  </p><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><blockquote><p>在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。   其中，一份位于站点根目录下，主要包含 Hexo   本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项  。<br>为了描述方便，在以下说明中，将前者称为<strong>站点配置文件</strong>， 后者称为<strong>主题配置文件</strong>。<br>以下所有终端执行的命令都在你的Hexo根目录下   </p><p><strong>每一个冒号后的修改都需要添加空格</strong></p></blockquote><p>对于配置文件的修改可以通过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo s #默认端口为4000 </span><br><span class="line"># hexo s -p xxxx # 指定端口</span><br></pre></td></tr></table></figure></p><p>来调试，访问’<a href="http://localhost:4000/&#39;" target="_blank" rel="noopener">http://localhost:4000/&#39;</a> 就能看到修改后的结果，有些修改需要重新开启调试以后才能看出变化</p><h3 id="修改-站点配置文件"><a href="#修改-站点配置文件" class="headerlink" title="修改 站点配置文件"></a>修改 站点配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: wuyu&apos;s Blog  </span><br><span class="line">subtitle: try.  </span><br><span class="line">description:</span><br><span class="line">keywords:</span><br><span class="line">author: wu</span><br><span class="line">language: zh-Hans # 选择语言，简体中文为zh-Hans</span><br><span class="line">timezone:</span><br></pre></td></tr></table></figure><p>对于默认生成的站点文件并不需要大量修改，而且可以通过安装第三方库的方式增加网站功能。</p><h3 id="自己添加的功能"><a href="#自己添加的功能" class="headerlink" title="自己添加的功能"></a>自己添加的功能</h3><h4 id="添加头像"><a href="#添加头像" class="headerlink" title="添加头像"></a>添加头像</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 添加头像</span><br><span class="line">avatar: /avatar/header.jpeg  # avatar文件夹需要保存在source文件夹下</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 自动生成sitemap</span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">  path: baidusitemap.xml</span><br></pre></td></tr></table></figure><h4 id="添加站点地图"><a href="#添加站点地图" class="headerlink" title="添加站点地图"></a>添加站点地图</h4><p>站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。Googlebot等搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站</p><p><strong>安装插件</strong></p><p>打开hexo目录下的dos命令行，分别安装百度和google插件  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><h4 id="添加本地站内搜索"><a href="#添加本地站内搜索" class="headerlink" title="添加本地站内搜索"></a>添加本地站内搜索</h4><p>需要安装依赖库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-generator-search</span><br><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></p><p>然后在站点配置文件添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br></pre></td></tr></table></figure></p><p>最后打开 主题配置文件 找到Local search，将enable设置为true</p><h4 id="用于生成RSS"><a href="#用于生成RSS" class="headerlink" title="用于生成RSS"></a>用于生成RSS</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Plugins: http://hexo.io/plugins/</span><br><span class="line">plugins: hexo-generate-feed</span><br></pre></td></tr></table></figure><h4 id="用于生成文章和站点的统计字数"><a href="#用于生成文章和站点的统计字数" class="headerlink" title="用于生成文章和站点的统计字数"></a>用于生成文章和站点的统计字数</h4><p>安装依赖库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-symbols-count-time</span><br></pre></td></tr></table></figure></p><p>然后在站点配置文件添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  symbols: true</span><br><span class="line">  time: true</span><br><span class="line">  total_symbols: true</span><br><span class="line">  total_time: true</span><br></pre></td></tr></table></figure></p><h3 id="修改-主题配置文件"><a href="#修改-主题配置文件" class="headerlink" title="修改 主题配置文件"></a>修改 主题配置文件</h3><h4 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h4><p>按照喜好选择自己想用的主题，这里我选择NexT主题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme-next/hexo-theme-next</span><br></pre></td></tr></table></figure><p>github上存在两个版本的next，上面时新版的next<br>将下载下来的主题重命名为next， 放入你hexo的根目录下的themes文件夹下<br>将站点配置文件中的theme修改为next</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure><h4 id="更换主题风格"><a href="#更换主题风格" class="headerlink" title="更换主题风格"></a>更换主题风格</h4><p>在next下有四种风格，通过取消注释来选择你想使用的风格，这里我才用了Gemini风格，但四种风格差异不大</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">scheme: Gemini</span><br></pre></td></tr></table></figure><h4 id="选择menu"><a href="#选择menu" class="headerlink" title="选择menu"></a>选择menu</h4><p>在menu下可以选择你可点选页面，tagsh和categories对于博客整理归类比较有用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  about: /about/ || user</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap</span><br><span class="line">  #commonweal: /404/ || heartbeat</span><br></pre></td></tr></table></figure></p><p>此时categories页面还没有生成，点击时会返回 cant get tags错误。<br>我们需要通过以下命令增加page</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>该命令将在source下生成categories文件夹，包含了index.md文件,之后的博客如果填写categories<br>就会自动分类。</p><h4 id="控制首页展示文章长度"><a href="#控制首页展示文章长度" class="headerlink" title="控制首页展示文章长度"></a>控制首页展示文章长度</h4><p>在博文中加入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt; !--more--&gt;</span><br></pre></td></tr></table></figure><p>来控制首页显示字符长度</p><p>也可以通过修改主题配置文件中的auto_excerpt来进行修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Automatically Excerpt. Not recommand.</span><br><span class="line"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span><br><span class="line">auto_excerpt:</span><br><span class="line">  enable: false</span><br><span class="line">  length: 150</span><br></pre></td></tr></table></figure><p>方法1较为灵活，方法2能控制每个文章长度统一但是会把完整的句子打断显示为省略号，各有利弊</p><h2 id="将文件配置到github以及个人域名"><a href="#将文件配置到github以及个人域名" class="headerlink" title="将文件配置到github以及个人域名"></a>将文件配置到github以及个人域名</h2><h3 id="搭建github库"><a href="#搭建github库" class="headerlink" title="搭建github库"></a>搭建github库</h3><p>第一步：</p><ol><li>需要有github账号</li><li>新建一个仓库项目名一定要是用户名.github.io的形式<br>第二步：<br>安装hexo-deployer-git（不然会出现ERROR Deployer not found: git）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>第三步：<br> 配置你hexo博客根目录下的_config.yml文件，需要修改的地方有两个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line">url: https://githubname.github.io</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: http://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:githubname/githubname.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h3 id="git配置"><a href="#git配置" class="headerlink" title="git配置"></a>git配置</h3><p>在使用hexo d之前如果没有配置过git,需要在终端中输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &apos;githubname&apos;</span><br></pre></td></tr></table></figure><p>然后连续回车，如果出现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/home/deepliver/.ssh/id_rsa): </span><br><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again:</span><br></pre></td></tr></table></figure><p>说明没有问题，继续回车会出现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Your identification has been saved in /User/username/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /User/username/.ssh/id_rsa.pub.</span><br></pre></td></tr></table></figure></p><p>此时输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /home/deepliver/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>会出现 ssh-rsa …<br>将这些字符全部复制到github的setting中的SSH即完成配置</p><h3 id="上传至github库"><a href="#上传至github库" class="headerlink" title="上传至github库"></a>上传至github库</h3><p>然后在博客文件夹的根目录下输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &apos;githubname&apos;</span><br><span class="line">$ git config --global user.email &apos;email@example.com&apos;</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>就能将文件夹上传到先前创建的XX.github.io项目中,此时访问这个网站就能看到你的博客内容</p><h3 id="个人域名"><a href="#个人域名" class="headerlink" title="个人域名"></a>个人域名</h3><ul><li>购买域名（任意网站，如阿里云）  </li><li><p>获得IP 输入ping 用户名.github.io   </p></li><li><p>解析域名<br>添加两条记录，选择记录类型A，第一个主机类型填@， 记录值为上一部得到的IP值<br>第二个主机类型为www，其余不变</p></li><li>在github上新建CNAME文件<br>内容为你所购买的域名</li></ul><p>到此搭建过程基本完成，可以通过各种第三方库来完善你的博客。</p><h2 id="最后一步"><a href="#最后一步" class="headerlink" title="最后一步"></a>最后一步</h2><p>之后就可以直接在本地的博客文件夹下通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;新的文章名&quot; # 就会在source/_posts下新建一个md文件</span><br><span class="line"># 写完博客之后</span><br><span class="line">hexo clean</span><br><span class="line">hexo g # 生成新的静态页面</span><br><span class="line">hexo d # 将内容同步到github上</span><br></pre></td></tr></table></figure><p>来新建博客～<br>选择tags和categories的方式为在默认的—-区域中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tags:</span><br><span class="line">  - tag1</span><br><span class="line">  - tag2</span><br><span class="line"># 或者</span><br><span class="line">tags: [tag1, tag2]</span><br><span class="line">categories: xxx</span><br></pre></td></tr></table></figure><p>由于每次上传值github的过程时生成新的静态页面的过程，所以github上的CNAME文件可能被替代，以下是几种解决方法：  </p><p>方法一：每次 <code>hexo d</code> 之后，就去 GitHub 仓库根目录新建 CNAME文件  </p><p>方法二：在 <code>hexo g</code> 之后， <code>hexo d</code> 之前，把CNAME文件复制到 “\public\” 目录下面，里面写入你要绑定的域名。  </p><p>方法三（推荐）：将需要上传至github的内容放在source文件夹，例如CNAME、favicon.ico、images等，这样在 hexo d 之后就不会被删除了。  </p><p>方法四：通过安装插件实现永久保留  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-cname --save</span><br></pre></td></tr></table></figure><p>之后在_config.yml中添加一条  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Plugins:</span><br><span class="line">- hexo-generator-cname</span><br></pre></td></tr></table></figure><p>需要注意的是：如果是在github上建立的CNAME文件，需要先clone到本地，然后安装插件，在deploy上去即可。CNAME只允许一个域名地址。<strong>此时_config.yml中url也需要修改成你所购买的域名.</strong></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
            <tag> wuyu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/p/3eeb.html"/>
      <url>/p/3eeb.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><a id="more"></a><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
